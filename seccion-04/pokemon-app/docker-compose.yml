version: "3"

services:
  db: # Este es el nombre del servicio
    container_name: ${MONGO_DB_NAME} # Este es el nombre que recibe el DNS de mi servicio en mi red (nombre del servidor)
    image: mongo:6.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - poke-vol:/data/db
    # ports:
    #   - 27017:27017
    # Util cuando trabajamos con multiples contenedores. Posiblemente alguna se cae por alguna razon etc.
    restart: always
    command: ["--auth"]

  mongo-express:
    depends_on:
      - db
    image: mongo-express:1.0.0-alpha.4
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: ${MONGO_DB_NAME}
    ports:
      - 8080:8081 # Mapea el puerta 8080 de mi computadora al 8081 del contenedor
    restart: always

  poke-app:
    container_name: poke-app
    depends_on:
      - db
      - mongo-express
    image: klerith/pokemon-nest-app:1.0.0
    ports:
      - 3000:3000
    environment:
      MONGODB: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGO_DB_NAME}:27017
      DB_NAME: ${MONGO_DB_NAME}
    restart: always
volumes:
  poke-vol:
    external: false # El docker compose va a crear un volumen para este docker compose file
